/* The following code was generated by JFlex 1.6.1 */

/* JFlex example: part of Java language lexer specification */
import java_cup.runtime.*;
import java_cup.*;
import supportItems.*;
/**
* This class is a simple example lexer.
*/

class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\54\1\27\1\25\1\0\1\27\1\24\16\54\4\0\1\27\1\5"+
    "\1\55\1\0\1\53\1\0\1\13\1\26\1\20\1\21\1\12\1\15"+
    "\1\23\1\11\1\1\1\14\1\30\11\31\1\17\1\22\1\2\1\4"+
    "\1\3\2\0\32\53\1\0\1\56\2\0\1\53\1\0\1\44\1\40"+
    "\1\50\1\42\1\34\1\33\1\41\1\37\1\32\2\53\1\35\1\52"+
    "\1\6\1\7\1\47\1\53\1\45\1\36\1\10\1\51\1\43\1\46"+
    "\3\53\1\0\1\16\2\0\41\54\2\0\4\53\4\0\1\53\2\0"+
    "\1\54\7\0\1\53\4\0\1\53\5\0\27\53\1\0\37\53\1\0"+
    "\u01ca\53\4\0\14\53\16\0\5\53\7\0\1\53\1\0\1\53\21\0"+
    "\160\54\5\53\1\0\2\53\2\0\4\53\10\0\1\53\1\0\3\53"+
    "\1\0\1\53\1\0\24\53\1\0\123\53\1\0\213\53\1\0\5\54"+
    "\2\0\236\53\11\0\46\53\2\0\1\53\7\0\47\53\7\0\1\53"+
    "\1\0\55\54\1\0\1\54\1\0\2\54\1\0\2\54\1\0\1\54"+
    "\10\0\33\53\5\0\3\53\15\0\5\54\6\0\1\53\4\0\13\54"+
    "\5\0\53\53\37\54\4\0\2\53\1\54\143\53\1\0\1\53\10\54"+
    "\1\0\6\54\2\53\2\54\1\0\4\54\2\53\12\54\3\53\2\0"+
    "\1\53\17\0\1\54\1\53\1\54\36\53\33\54\2\0\131\53\13\54"+
    "\1\53\16\0\12\54\41\53\11\54\2\53\4\0\1\53\5\0\26\53"+
    "\4\54\1\53\11\54\1\53\3\54\1\53\5\54\22\0\31\53\3\54"+
    "\104\0\1\53\1\0\13\53\67\0\33\54\1\0\4\54\66\53\3\54"+
    "\1\53\22\54\1\53\7\54\12\53\2\54\2\0\12\54\1\0\7\53"+
    "\1\0\7\53\1\0\3\54\1\0\10\53\2\0\2\53\2\0\26\53"+
    "\1\0\7\53\1\0\1\53\3\0\4\53\2\0\1\54\1\53\7\54"+
    "\2\0\2\54\2\0\3\54\1\53\10\0\1\54\4\0\2\53\1\0"+
    "\3\53\2\54\2\0\12\54\4\53\7\0\1\53\5\0\3\54\1\0"+
    "\6\53\4\0\2\53\2\0\26\53\1\0\7\53\1\0\2\53\1\0"+
    "\2\53\1\0\2\53\2\0\1\54\1\0\5\54\4\0\2\54\2\0"+
    "\3\54\3\0\1\54\7\0\4\53\1\0\1\53\7\0\14\54\3\53"+
    "\1\54\13\0\3\54\1\0\11\53\1\0\3\53\1\0\26\53\1\0"+
    "\7\53\1\0\2\53\1\0\5\53\2\0\1\54\1\53\10\54\1\0"+
    "\3\54\1\0\3\54\2\0\1\53\17\0\2\53\2\54\2\0\12\54"+
    "\1\0\1\53\17\0\3\54\1\0\10\53\2\0\2\53\2\0\26\53"+
    "\1\0\7\53\1\0\2\53\1\0\5\53\2\0\1\54\1\53\7\54"+
    "\2\0\2\54\2\0\3\54\10\0\2\54\4\0\2\53\1\0\3\53"+
    "\2\54\2\0\12\54\1\0\1\53\20\0\1\54\1\53\1\0\6\53"+
    "\3\0\3\53\1\0\4\53\3\0\2\53\1\0\1\53\1\0\2\53"+
    "\3\0\2\53\3\0\3\53\3\0\14\53\4\0\5\54\3\0\3\54"+
    "\1\0\4\54\2\0\1\53\6\0\1\54\16\0\12\54\11\0\1\53"+
    "\7\0\3\54\1\0\10\53\1\0\3\53\1\0\27\53\1\0\12\53"+
    "\1\0\5\53\3\0\1\53\7\54\1\0\3\54\1\0\4\54\7\0"+
    "\2\54\1\0\2\53\6\0\2\53\2\54\2\0\12\54\22\0\2\54"+
    "\1\0\10\53\1\0\3\53\1\0\27\53\1\0\12\53\1\0\5\53"+
    "\2\0\1\54\1\53\7\54\1\0\3\54\1\0\4\54\7\0\2\54"+
    "\7\0\1\53\1\0\2\53\2\54\2\0\12\54\1\0\2\53\17\0"+
    "\2\54\1\0\10\53\1\0\3\53\1\0\51\53\2\0\1\53\7\54"+
    "\1\0\3\54\1\0\4\54\1\53\10\0\1\54\10\0\2\53\2\54"+
    "\2\0\12\54\12\0\6\53\2\0\2\54\1\0\22\53\3\0\30\53"+
    "\1\0\11\53\1\0\1\53\2\0\7\53\3\0\1\54\4\0\6\54"+
    "\1\0\1\54\1\0\10\54\22\0\2\54\15\0\60\53\1\54\2\53"+
    "\7\54\4\0\10\53\10\54\1\0\12\54\47\0\2\53\1\0\1\53"+
    "\2\0\2\53\1\0\1\53\2\0\1\53\6\0\4\53\1\0\7\53"+
    "\1\0\3\53\1\0\1\53\1\0\1\53\2\0\2\53\1\0\4\53"+
    "\1\54\2\53\6\54\1\0\2\54\1\53\2\0\5\53\1\0\1\53"+
    "\1\0\6\54\2\0\12\54\2\0\4\53\40\0\1\53\27\0\2\54"+
    "\6\0\12\54\13\0\1\54\1\0\1\54\1\0\1\54\4\0\2\54"+
    "\10\53\1\0\44\53\4\0\24\54\1\0\2\54\5\53\13\54\1\0"+
    "\44\54\11\0\1\54\71\0\53\53\24\54\1\53\12\54\6\0\6\53"+
    "\4\54\4\53\3\54\1\53\3\54\2\53\7\54\3\53\4\54\15\53"+
    "\14\54\1\53\17\54\2\0\46\53\1\0\1\53\5\0\1\53\2\0"+
    "\53\53\1\0\u014d\53\1\0\4\53\2\0\7\53\1\0\1\53\1\0"+
    "\4\53\2\0\51\53\1\0\4\53\2\0\41\53\1\0\4\53\2\0"+
    "\7\53\1\0\1\53\1\0\4\53\2\0\17\53\1\0\71\53\1\0"+
    "\4\53\2\0\103\53\2\0\3\54\40\0\20\53\20\0\125\53\14\0"+
    "\u026c\53\2\0\21\53\1\0\32\53\5\0\113\53\3\0\3\53\17\0"+
    "\15\53\1\0\4\53\3\54\13\0\22\53\3\54\13\0\22\53\2\54"+
    "\14\0\15\53\1\0\3\53\1\0\2\54\14\0\64\53\40\54\3\0"+
    "\1\53\3\0\2\53\1\54\2\0\12\54\41\0\3\54\2\0\12\54"+
    "\6\0\130\53\10\0\51\53\1\54\1\53\5\0\106\53\12\0\35\53"+
    "\3\0\14\54\4\0\14\54\12\0\12\54\36\53\2\0\5\53\13\0"+
    "\54\53\4\0\21\54\7\53\2\54\6\0\12\54\46\0\27\53\5\54"+
    "\4\0\65\53\12\54\1\0\35\54\2\0\13\54\6\0\12\54\15\0"+
    "\1\53\130\0\5\54\57\53\21\54\7\53\4\0\12\54\21\0\11\54"+
    "\14\0\3\54\36\53\15\54\2\53\12\54\54\53\16\54\14\0\44\53"+
    "\24\54\10\0\12\54\3\0\3\53\12\54\44\53\122\0\3\54\1\0"+
    "\25\54\4\53\1\54\4\53\3\54\2\53\11\0\300\53\47\54\25\0"+
    "\4\54\u0116\53\2\0\6\53\2\0\46\53\2\0\6\53\2\0\10\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\37\53\2\0\65\53"+
    "\1\0\7\53\1\0\1\53\3\0\3\53\1\0\7\53\3\0\4\53"+
    "\2\0\6\53\4\0\15\53\5\0\3\53\1\0\7\53\16\0\5\54"+
    "\32\0\5\54\20\0\2\53\23\0\1\53\13\0\5\54\5\0\6\54"+
    "\1\0\1\53\15\0\1\53\20\0\15\53\3\0\33\53\25\0\15\54"+
    "\4\0\1\54\3\0\14\54\21\0\1\53\4\0\1\53\2\0\12\53"+
    "\1\0\1\53\3\0\5\53\6\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\4\53\1\0\13\53\2\0\4\53\5\0\5\53\4\0\1\53"+
    "\21\0\51\53\u0a77\0\57\53\1\0\57\53\1\0\205\53\6\0\4\53"+
    "\3\54\2\53\14\0\46\53\1\0\1\53\5\0\1\53\2\0\70\53"+
    "\7\0\1\53\17\0\1\54\27\53\11\0\7\53\1\0\7\53\1\0"+
    "\7\53\1\0\7\53\1\0\7\53\1\0\7\53\1\0\7\53\1\0"+
    "\7\53\1\0\40\54\57\0\1\53\u01d5\0\3\53\31\0\11\53\6\54"+
    "\1\0\5\53\2\0\5\53\4\0\126\53\2\0\2\54\2\0\3\53"+
    "\1\0\132\53\1\0\4\53\5\0\51\53\3\0\136\53\21\0\33\53"+
    "\65\0\20\53\u0200\0\u19b6\53\112\0\u51cd\53\63\0\u048d\53\103\0\56\53"+
    "\2\0\u010d\53\3\0\20\53\12\54\2\53\24\0\57\53\1\54\4\0"+
    "\12\54\1\0\31\53\7\0\1\54\120\53\2\54\45\0\11\53\2\0"+
    "\147\53\2\0\4\53\1\0\4\53\14\0\13\53\115\0\12\53\1\54"+
    "\3\53\1\54\4\53\1\54\27\53\5\54\20\0\1\53\7\0\64\53"+
    "\14\0\2\54\62\53\21\54\13\0\12\54\6\0\22\54\6\53\3\0"+
    "\1\53\4\0\12\54\34\53\10\54\2\0\27\53\15\54\14\0\35\53"+
    "\3\0\4\54\57\53\16\54\16\0\1\53\12\54\46\0\51\53\16\54"+
    "\11\0\3\53\1\54\10\53\2\54\2\0\12\54\6\0\27\53\3\0"+
    "\1\53\1\54\4\0\60\53\1\54\1\53\3\54\2\53\2\54\5\53"+
    "\2\54\1\53\1\54\1\53\30\0\3\53\2\0\13\53\5\54\2\0"+
    "\3\53\2\54\12\0\6\53\2\0\6\53\2\0\6\53\11\0\7\53"+
    "\1\0\7\53\221\0\43\53\10\54\1\0\2\54\2\0\12\54\6\0"+
    "\u2ba4\53\14\0\27\53\4\0\61\53\u2104\0\u016e\53\2\0\152\53\46\0"+
    "\7\53\14\0\5\53\5\0\1\53\1\54\12\53\1\0\15\53\1\0"+
    "\5\53\1\0\1\53\1\0\2\53\1\0\2\53\1\0\154\53\41\0"+
    "\u016b\53\22\0\100\53\2\0\66\53\50\0\15\53\3\0\20\54\20\0"+
    "\7\54\14\0\2\53\30\0\3\53\31\0\1\53\6\0\5\53\1\0"+
    "\207\53\2\0\1\54\4\0\1\53\13\0\12\54\7\0\32\53\4\0"+
    "\1\53\1\0\32\53\13\0\131\53\3\0\6\53\2\0\6\53\2\0"+
    "\6\53\2\0\3\53\3\0\2\53\3\0\2\53\22\0\3\54\4\0"+
    "\14\53\1\0\32\53\1\0\23\53\1\0\2\53\1\0\17\53\2\0"+
    "\16\53\42\0\173\53\105\0\65\53\210\0\1\54\202\0\35\53\3\0"+
    "\61\53\57\0\37\53\21\0\33\53\65\0\36\53\2\0\44\53\4\0"+
    "\10\53\1\0\5\53\52\0\236\53\2\0\12\54\u0356\0\6\53\2\0"+
    "\1\53\1\0\54\53\1\0\2\53\3\0\1\53\2\0\27\53\252\0"+
    "\26\53\12\0\32\53\106\0\70\53\6\0\2\53\100\0\1\53\3\54"+
    "\1\0\2\54\5\0\4\54\4\53\1\0\3\53\1\0\33\53\4\0"+
    "\3\54\4\0\1\54\40\0\35\53\203\0\66\53\12\0\26\53\12\0"+
    "\23\53\215\0\111\53\u03b7\0\3\54\65\53\17\54\37\0\12\54\20\0"+
    "\3\54\55\53\13\54\2\0\1\54\22\0\31\53\7\0\12\54\6\0"+
    "\3\54\44\53\16\54\1\0\12\54\100\0\3\54\60\53\16\54\4\53"+
    "\13\0\12\54\u04a6\0\53\53\15\54\10\0\12\54\u0936\0\u036f\53\221\0"+
    "\143\53\u0b9d\0\u042f\53\u33d1\0\u0239\53\u04c7\0\105\53\13\0\1\53\56\54"+
    "\20\0\4\54\15\53\u4060\0\2\53\u2163\0\5\54\3\0\26\54\2\0"+
    "\7\54\36\0\4\54\224\0\3\54\u01bb\0\125\53\1\0\107\53\1\0"+
    "\2\53\2\0\1\53\2\0\2\53\2\0\4\53\1\0\14\53\1\0"+
    "\1\53\1\0\7\53\1\0\101\53\1\0\4\53\2\0\10\53\1\0"+
    "\7\53\1\0\34\53\1\0\4\53\1\0\5\53\1\0\1\53\3\0"+
    "\7\53\1\0\u0154\53\2\0\31\53\1\0\31\53\1\0\37\53\1\0"+
    "\31\53\1\0\37\53\1\0\31\53\1\0\37\53\1\0\31\53\1\0"+
    "\37\53\1\0\31\53\1\0\10\53\2\0\62\54\u1600\0\4\53\1\0"+
    "\33\53\1\0\2\53\1\0\1\53\2\0\1\53\1\0\12\53\1\0"+
    "\4\53\1\0\1\53\1\0\1\53\6\0\1\53\4\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\3\53\1\0\2\53\1\0\1\53\2\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\1\0\1\53\2\0\4\53\1\0\7\53\1\0\4\53\1\0"+
    "\4\53\1\0\1\53\1\0\12\53\1\0\21\53\5\0\3\53\1\0"+
    "\5\53\1\0\21\53\u1144\0\ua6d7\53\51\0\u1035\53\13\0\336\53\u3fe2\0"+
    "\u021e\53\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\54\36\0\140\54\200\0\360\54\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\2\4\1\2\3\5\1\6"+
    "\1\7\1\2\1\7\1\10\2\2\1\11\1\12\1\13"+
    "\1\14\2\1\2\15\10\5\1\16\1\17\1\20\1\21"+
    "\1\1\2\2\1\4\1\22\3\5\1\23\1\24\1\25"+
    "\1\26\1\5\1\27\5\5\1\30\3\5\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\2\5\1\0\2\25"+
    "\2\5\1\40\3\5\1\41\2\5\1\42\1\43\1\0"+
    "\2\5\1\44\6\5\1\45\1\5\1\46\1\47\6\5"+
    "\1\50\1\51\1\52\2\5\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[110];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\215\0\274\0\353\0\353"+
    "\0\u011a\0\u0149\0\u0178\0\u01a7\0\215\0\u01d6\0\u0205\0\215"+
    "\0\u0234\0\u0263\0\215\0\215\0\215\0\215\0\u0292\0\215"+
    "\0\215\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db"+
    "\0\u040a\0\u0439\0\215\0\u0468\0\215\0\u0497\0\u04c6\0\u04f5"+
    "\0\u0524\0\215\0\215\0\u0553\0\u0582\0\u05b1\0\215\0\u05e0"+
    "\0\u060f\0\215\0\u063e\0\u0149\0\u066d\0\u069c\0\u06cb\0\u06fa"+
    "\0\u0729\0\u0149\0\u0758\0\u0787\0\u07b6\0\215\0\215\0\215"+
    "\0\215\0\215\0\215\0\u0149\0\u07e5\0\u0814\0\u0843\0\u0872"+
    "\0\215\0\u08a1\0\u08d0\0\u0149\0\u08ff\0\u092e\0\u095d\0\u0149"+
    "\0\u098c\0\u09bb\0\u0149\0\u0149\0\u09ea\0\u0a19\0\u0a48\0\u0149"+
    "\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0149\0\u0b91"+
    "\0\u0149\0\u0149\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab"+
    "\0\u0149\0\u0149\0\u0149\0\u0cda\0\u0d09\0\u0149";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[110];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\4\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\3\12\1\36\1\12\1\37"+
    "\1\40\2\12\1\41\1\42\4\12\1\4\1\43\1\4"+
    "\24\44\2\4\27\44\1\45\1\46\12\47\1\50\1\47"+
    "\1\51\42\47\63\0\1\52\4\0\1\53\51\0\1\52"+
    "\60\0\1\12\1\54\1\12\17\0\25\12\10\0\3\12"+
    "\17\0\25\12\10\0\3\12\17\0\7\12\1\55\5\12"+
    "\1\56\7\12\5\0\1\57\66\0\1\15\55\0\1\60"+
    "\1\0\1\61\60\0\1\20\44\0\1\62\77\0\1\30"+
    "\61\0\2\32\33\0\1\63\2\12\17\0\3\12\1\64"+
    "\21\12\10\0\3\12\17\0\14\12\1\65\10\12\10\0"+
    "\1\66\2\12\17\0\5\12\1\67\17\12\10\0\1\12"+
    "\1\70\1\12\17\0\4\12\1\71\20\12\10\0\1\12"+
    "\1\72\1\12\17\0\25\12\10\0\3\12\17\0\14\12"+
    "\1\73\10\12\10\0\3\12\17\0\7\12\1\74\15\12"+
    "\10\0\3\12\17\0\15\12\1\75\7\12\2\0\24\44"+
    "\2\0\27\44\10\0\1\76\1\0\1\77\34\0\1\100"+
    "\7\0\1\101\1\0\12\47\1\0\1\47\1\0\42\47"+
    "\14\0\1\102\54\0\1\103\52\0\2\12\1\104\17\0"+
    "\25\12\10\0\3\12\17\0\4\12\1\105\20\12\10\0"+
    "\3\12\17\0\21\12\1\106\3\12\14\0\1\107\44\0"+
    "\24\61\1\110\1\111\1\0\30\61\6\0\2\12\1\112"+
    "\17\0\25\12\10\0\3\12\17\0\5\12\1\113\17\12"+
    "\10\0\3\12\17\0\12\12\1\114\12\12\10\0\3\12"+
    "\17\0\6\12\1\115\16\12\10\0\1\12\1\116\1\12"+
    "\17\0\25\12\10\0\3\12\17\0\11\12\1\117\13\12"+
    "\10\0\3\12\17\0\15\12\1\120\7\12\10\0\3\12"+
    "\17\0\2\12\1\121\22\12\10\0\1\12\1\122\1\12"+
    "\17\0\25\12\10\0\1\123\2\12\17\0\25\12\10\0"+
    "\3\12\17\0\4\12\1\124\20\12\2\0\12\107\1\125"+
    "\44\107\25\0\1\111\37\0\3\12\17\0\4\12\1\126"+
    "\20\12\10\0\3\12\17\0\6\12\1\127\16\12\10\0"+
    "\3\12\17\0\4\12\1\130\20\12\10\0\3\12\17\0"+
    "\5\12\1\131\17\12\10\0\3\12\17\0\2\12\1\132"+
    "\22\12\10\0\3\12\17\0\5\12\1\133\17\12\10\0"+
    "\3\12\17\0\11\12\1\134\6\12\1\135\4\12\2\0"+
    "\12\107\1\125\1\107\1\111\42\107\6\0\3\12\17\0"+
    "\11\12\1\136\13\12\10\0\3\12\17\0\4\12\1\137"+
    "\20\12\10\0\3\12\17\0\4\12\1\140\20\12\10\0"+
    "\1\141\2\12\17\0\25\12\10\0\3\12\17\0\4\12"+
    "\1\142\20\12\10\0\3\12\17\0\15\12\1\143\7\12"+
    "\10\0\3\12\17\0\4\12\1\144\20\12\10\0\3\12"+
    "\17\0\4\12\1\145\20\12\10\0\3\12\17\0\14\12"+
    "\1\146\10\12\10\0\3\12\17\0\14\12\1\147\10\12"+
    "\10\0\3\12\17\0\12\12\1\150\12\12\10\0\3\12"+
    "\17\0\15\12\1\151\7\12\10\0\1\152\2\12\17\0"+
    "\25\12\10\0\3\12\17\0\22\12\1\153\2\12\10\0"+
    "\3\12\17\0\21\12\1\154\3\12\10\0\3\12\17\0"+
    "\15\12\1\155\7\12\10\0\3\12\17\0\4\12\1\156"+
    "\20\12\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3384];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\2\11\7\1\1\11\2\1\1\11\2\1"+
    "\4\11\1\1\2\11\11\1\1\11\1\1\1\11\4\1"+
    "\2\11\3\1\1\11\2\1\1\11\13\1\6\11\3\1"+
    "\1\0\1\1\1\11\13\1\1\0\31\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[110];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
private TableOfSymbols table = new TableOfSymbols();

int comments_level;
  StringBuffer string = new StringBuffer();


  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }

  private Symbol symbol(Object value, int type) {

    java.util.Map.Entry entry = table.addLexem(value.toString());
    table.addAttribute(value.toString(), new Attributo("class", type + ""));

    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2842) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case STRING: {
              throw new Error("Fine file raggiunto");
            }
            case 111: break;
            case COMMENT: {
              throw new Error("Fine file raggiunto");
            }
            case 112: break;
            default:
          { return new java_cup.runtime.Symbol(sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* ignore */
            }
          case 44: break;
          case 2: 
            { throw new Error("Illegal character <"+ yytext()+">");
            }
          case 45: break;
          case 3: 
            { return symbol("END_PROGRAM",sym.END_PROGRAM);
            }
          case 46: break;
          case 4: 
            { return symbol(yytext(), sym.RELOP);
            }
          case 47: break;
          case 5: 
            { return symbol(yytext(), sym.IDENTIFIER);
            }
          case 48: break;
          case 6: 
            { return symbol("MINUS", sym.MINUS);
            }
          case 49: break;
          case 7: 
            { return symbol(yytext(), sym.MULT_OPERATOR);
            }
          case 50: break;
          case 8: 
            { return symbol(yytext(), sym.ADD_OPERATOR);
            }
          case 51: break;
          case 9: 
            { return symbol("LPAREN",sym.LPAR);
            }
          case 52: break;
          case 10: 
            { return symbol("RPAREN",sym.RPAR);
            }
          case 53: break;
          case 11: 
            { return symbol("INSTRUCTION_SEPARATOR",sym.INSTRUCTION_SEPARATOR);
            }
          case 54: break;
          case 12: 
            { return symbol("SEPARATOR",sym.SEPARATOR);
            }
          case 55: break;
          case 13: 
            { return symbol(new Integer(yytext()).toString(), sym.INTEGER_CONSTANT);
            }
          case 56: break;
          case 14: 
            { string.setLength(0); yybegin(STRING);
            }
          case 57: break;
          case 15: 
            { string.append( yytext() );
            }
          case 58: break;
          case 16: 
            { yybegin(YYINITIAL); return symbol("\""+ string.toString() + "\"", sym.STRING_CONSTANT);
            }
          case 59: break;
          case 17: 
            { string.append('\\');
            }
          case 60: break;
          case 18: 
            { return symbol("READ",sym.READ);
            }
          case 61: break;
          case 19: 
            { return symbol("WRITE",sym.WRITE);
            }
          case 62: break;
          case 20: 
            { comments_level ++; yybegin(COMMENT);
            }
          case 63: break;
          case 21: 
            { /*Ignore if is a EndOfLineComment or a DocumentationComment*/
            }
          case 64: break;
          case 22: 
            { return symbol(sym.ASSIGN);
            }
          case 65: break;
          case 23: 
            { return symbol(sym.IF);
            }
          case 66: break;
          case 24: 
            { return symbol(sym.DO);
            }
          case 67: break;
          case 25: 
            { string.append('\n');
            }
          case 68: break;
          case 26: 
            { string.append('\t');
            }
          case 69: break;
          case 27: 
            { string.append('\r');
            }
          case 70: break;
          case 28: 
            { string.append('\"');
            }
          case 71: break;
          case 29: 
            { if( -- comments_level == 0) yybegin(YYINITIAL);
            }
          case 72: break;
          case 30: 
            { comments_level ++;
            }
          case 73: break;
          case 31: 
            { return symbol(sym.NOT);
            }
          case 74: break;
          case 32: 
            { return symbol(sym.END);
            }
          case 75: break;
          case 33: 
            { return symbol(sym.VAR);
            }
          case 76: break;
          case 34: 
            { return symbol(sym.THEN);
            }
          case 77: break;
          case 35: 
            { return symbol(sym.TRUE);
            }
          case 78: break;
          case 36: 
            { return symbol(sym.ELSE);
            }
          case 79: break;
          case 37: 
            { return symbol(sym.FALSE);
            }
          case 80: break;
          case 38: 
            { return symbol(sym.BEGIN);
            }
          case 81: break;
          case 39: 
            { return symbol(sym.WHILE);
            }
          case 82: break;
          case 40: 
            { return symbol(sym.INTEGER);
            }
          case 83: break;
          case 41: 
            { return symbol(sym.BOOLEAN);
            }
          case 84: break;
          case 42: 
            { return symbol(sym.PROGRAM);
            }
          case 85: break;
          case 43: 
            { return symbol(sym.PROCEDURE);
            }
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
